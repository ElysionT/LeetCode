package org.demo.medium;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/**
 * 2611. 老鼠和奶酪
 * https://leetcode.cn/problems/mice-and-cheese/
 * 
 * 有两只老鼠和 n 块不同类型的奶酪，每块奶酪都只能被其中一只老鼠吃掉。
 * 下标为 i 处的奶酪被吃掉的得分为：
 * 如果第一只老鼠吃掉，则得分为 reward1[i] 。
 * 如果第二只老鼠吃掉，则得分为 reward2[i] 。
 * 给你一个正整数数组 reward1 ，一个正整数数组 reward2 ，和一个非负整数 k 。
 * 请你返回第一只老鼠恰好吃掉 k 块奶酪的情况下，最大 得分为多少。
 * 
 * 示例 1：
 * 输入：reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2
 * 输出：15
 * 解释：这个例子中，第一只老鼠吃掉第 2 和 3 块奶酪（下标从 0 开始），第二只老鼠吃掉第 0 和 1 块奶酪。
 * 总得分为 4 + 4 + 3 + 4 = 15 。
 * 15 是最高得分。
 * 
 * 示例 2：
 * 输入：reward1 = [1,1], reward2 = [1,1], k = 2
 * 输出：2
 * 解释：这个例子中，第一只老鼠吃掉第 0 和 1 块奶酪（下标从 0 开始），第二只老鼠不吃任何奶酪。
 * 总得分为 1 + 1 = 2 。
 * 2 是最高得分。
 * 
 * 提示：
 * 1 <= n == reward1.length == reward2.length <= 105
 * 1 <= reward1[i], reward2[i] <= 1000
 * 0 <= k <= n
 */
public class Q2611_MiceAndCheese {
	private static final boolean DEBUG = false;

	public int miceAndCheese4(int[] reward1, int[] reward2, int k) {
		int length = reward1.length;

		if (DEBUG)
			System.out.println("length:" + length);

		final KeyValue[] reward = new KeyValue[length];

		int v1, v2;
		long start = System.currentTimeMillis();
		for (int i = 0; i < length; i++) {
			v1 = reward1[i];
			v2 = reward2[i];
			reward[i] = new KeyValue(i, (v1 - v2));
		}
		if (DEBUG) {
			System.out.println("Time1:" + (System.currentTimeMillis() - start));
			System.out.println("Reward:" + Arrays.toString(reward));
		}

		start = System.currentTimeMillis();
		Arrays.sort(reward);
		if (DEBUG) {
			System.out.println("Time2:" + (System.currentTimeMillis() - start));
			System.out.println("Reward ASC:" + Arrays.toString(reward));
		}

		int i = 0, k_ = length - k, j = k_, result = 0;
		start = System.currentTimeMillis();
		while (i < k_ || j < length) {
			if (i < k_) {
				result += reward2[reward[i].key];
				i++;
			}
			if (j < length) {
				result += reward1[reward[j].key];
				j++;
			}
		}
		if (DEBUG)
			System.out.println("Time3:" + (System.currentTimeMillis() - start));

		return result;
	}

	@Deprecated
	public int miceAndCheese3(int[] reward1, int[] reward2, int k) {
		final List<KeyValue> sortList = new LinkedList<>();
		int length = reward1.length;
		if (DEBUG)
			System.out.println("length:" + length);

		int v1, v2;
		long start = System.currentTimeMillis();
		for (int i = 0; i < length; i++) {
			v1 = reward1[i];
			v2 = reward2[i];
			doDescSort3(new KeyValue(i, (v1 - v2)), sortList);
		}
		System.out.println("Time1:" + (System.currentTimeMillis() - start));

		if (DEBUG)
			System.out.println("sortList:" + sortList);

		int i = 0, j = k, result = 0;
		start = System.currentTimeMillis();
		while (i < k || j < length) {
			if (i < k) {
				result += reward1[sortList.get(i).key];
				i++;
			}
			if (j < length) {
				result += reward2[sortList.get(j).key];
				j++;
			}
		}
		System.out.println("Time2:" + (System.currentTimeMillis() - start));

		return result;
	}

	private void doDescSort3(KeyValue target, List<KeyValue> sortList) {
		KeyValue keyValue;
		for (int i = 0, size = sortList.size(); i < size; i++) {
			keyValue = sortList.get(i);
			if (target.compareTo(keyValue) >= 0) {
				sortList.add(i, target);
				return;
			}
		}
		sortList.add(target);
	}

	@Deprecated
	public int miceAndCheese2(int[] reward1, int[] reward2, int k) {
		// Cache reward1 index and do DESC sort by value.
		final List<Integer> reward1SortList = new LinkedList<>();
		final List<Integer> reward2SortList = new LinkedList<>();

		int length = reward1.length;
		if (DEBUG)
			System.out.println("length:" + length);
		int sum1 = 0, sum2 = 0;
		for (int i = 0; i < length; i++) {
			doDescSort2(i, reward1, reward2, reward1SortList);
			sum1 += reward1[i];
			doDescSort2(i, reward2, reward1, reward2SortList);
			sum2 += reward2[i];
		}
		if (DEBUG) {
			System.out.println("sum1:" + sum1 + ", reward1SortList:" + reward1SortList);
			System.out.println("sum2:" + sum2 + ", reward2SortList:" + reward2SortList);
		}

		if (0 == k) {
			return sum2;
		} else if (length == k) {
			return sum1;
		}

		int k_ = length - k;

		// if (k > k_ || (k == k_ && sum1 >= sum2)) {
		// return miceAndCheese2(reward1, reward1SortList, reward2, reward2SortList, k, k_);
		// } else {
		// return miceAndCheese2(reward2, reward2SortList, reward1, reward1SortList, k_, k);
		// }

		int result1 = miceAndCheese2(reward1, reward1SortList, reward2, reward2SortList, k, k_);
		int result2 = miceAndCheese2(reward2, reward2SortList, reward1, reward1SortList, k_, k);
		System.out.println("result1:" + result1 + ", result2:" + result2);

		return result1 >= result2 ? result1 : result2;
	}

	@Deprecated
	public int miceAndCheese2(int[] reward1, List<Integer> reward1SortList, int[] reward2,
			List<Integer> reward2SortList, int k, int k_) {
		List<Integer> excludeList = new ArrayList<>();
		int result = 0;
		int index;
		for (int i = 0; i < k; i++) {
			index = reward1SortList.get(i);
			excludeList.add(index);
			result += reward1[index];
		}

		if (k_ > 0) {
			for (int j = 0, count = 0; count < k_; j++) {
				index = reward2SortList.get(j);
				if (!excludeList.contains(index)) {
					result += reward2[index];
					count++;
				}
			}
		}

		return result;
	}

	@Deprecated
	private void doDescSort2(int target, int[] reward, int[] dependence, List<Integer> rewardSortList) {
		int size = rewardSortList.size();
		if (0 == size) {
			rewardSortList.add(target);
			return;
		}

		int index;
		for (int i = 0, limit = size - 1; i < size; i++) {
			index = rewardSortList.get(i);
			if (reward[target] > reward[index]) {
				rewardSortList.add(i, target);
				return;
			} else if (reward[target] == reward[index] && dependence[target] <= dependence[index]) {
				rewardSortList.add(i, target);
				return;
			}

			if (i == limit) {
				rewardSortList.add(target);
			}
		}
	}

	@Deprecated
	private void doDescSort(int target, int[] reward, int[] dependence, List<Integer> rewardSortList) {
		int targetValue = reward[target];
		int size = rewardSortList.size();
		int limit = size - 1;
		if (0 == size || targetValue < reward[rewardSortList.get(limit)]) {
			rewardSortList.add(target);
			return;
		} else if (targetValue > reward[rewardSortList.get(0)]) {
			rewardSortList.add(0, target);
			return;
		} else {
			int index;
			int index_;
			for (int i = 0; i < limit; i++) {
				index = rewardSortList.get(i);
				index_ = rewardSortList.get(i + 1);
				if (targetValue < reward[index] && targetValue > reward[index_]) {
					rewardSortList.add(i + 1, target);
					break;
				} else if (targetValue == reward[index] && dependence[target] <= dependence[index]) {
					rewardSortList.add(i, target);
					break;
				}

				if (limit == i + 1) {
					// targetValue == reward[index_]
					if (dependence[target] <= dependence[index - 1]) {
						rewardSortList.add(i + 1, target);
					} else {
						rewardSortList.add(target);
					}
				}

			}
		}
	}

	@Deprecated
	private List<KeyValue> mGteDesc;
	@Deprecated
	private List<KeyValue> mLtDesc;

	@Deprecated
	public int miceAndCheese(int[] reward1, int[] reward2, int k) {
		mGteDesc = new LinkedList<>(); // reward1 index:value
		mLtDesc = new LinkedList<>(); // reward2 index:value

		int length = reward1.length;
		int v1;
		int v2;
		for (int i = 0; i < length; i++) {
			v1 = reward1[i];
			v2 = reward2[i];
			if (v1 >= v2) {
				cache(new KeyValue(i, v1), mGteDesc);
			} else {
				cache(new KeyValue(i, v2), mLtDesc);
			}
		}

		int result = 0;
		for (int i = 0; i < k; i++) {
			result += mGteDesc.get(i).value;
		}

		int k_ = k - mGteDesc.size();
		if (k_ > 0) {
			for (int i = 0; i < k_; i++) {
				result += mLtDesc.get(i).value;
			}
		}

		return result;
	}

	@Deprecated
	private void cache(KeyValue target, List<KeyValue> keyValues) {
		int size = keyValues.size();
		int limit = size - 1;
		if (0 == size || target.compareTo(keyValues.get(limit)) >= 0) {
			keyValues.add(target);
		} else if (target.compareTo(keyValues.get(0)) <= 0) {
			keyValues.add(0, target);
		} else {
			for (int i = 0; i < limit; i++) {
				if (target.compareTo(keyValues.get(i)) >= 0 && target.compareTo(keyValues.get(i + 1)) <= 0) {
					keyValues.add(i + 1, target);
					break;
				}
			}
		}
	}

	public static void main(String[] args) {
		// 15
		int[] reward1_1 = { 1, 1, 3, 4 }, reward2_1 = { 4, 4, 1, 1 };
		int k_1 = 2;
		// 2
		int[] reward1_2 = { 1, 1 }, reward2_2 = { 1, 1 };
		int k_2 = 2;
		// 24
		int[] reward1_3 = { 1, 4, 4, 6, 4 }, reward2_3 = { 6, 5, 3, 6, 1 };
		int k_3 = 1;
		// 17
		int[] reward1_4 = { 1, 4, 2, 1, 1 }, reward2_4 = { 5, 6, 1, 2, 5 };
		int k_4 = 3;
		// 22
		int[] reward1_5 = { 4, 1, 4, 3, 2, 3 }, reward2_5 = { 4, 4, 4, 1, 4, 1 };
		int k_5 = 3;
		// 15
		int[] reward1_6 = { 1, 2, 2, 2, 3, 3 }, reward2_6 = { 2, 1, 2, 4, 3, 2 };
		int k_6 = 5;
		// 14
		int[] reward1_7 = { 1, 1, 4, 1, 2, 3 }, reward2_7 = { 1, 2, 4, 1, 3, 3 };
		int k_7 = 4;

		Q2611_MiceAndCheese solution = new Q2611_MiceAndCheese();
		System.out.print("reward1_1:" + Arrays.toString(reward1_1));
		System.out.print(", reward2_1:" + Arrays.toString(reward2_1));
		System.out.println(", k_1:" + k_1);
		long start = System.currentTimeMillis();
		int result = solution.miceAndCheese4(reward1_1, reward2_1, k_1);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 15 - Result_1:" + result);

		System.out.print("reward1_2:" + Arrays.toString(reward1_2));
		System.out.print(", reward2_2:" + Arrays.toString(reward2_2));
		System.out.println(", k_2:" + k_2);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_2, reward2_2, k_2);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 2 - Result_2:" + result);

		System.out.print("reward1_3:" + Arrays.toString(reward1_3));
		System.out.print(", reward2_3:" + Arrays.toString(reward2_3));
		System.out.println(", k_3:" + k_3);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_3, reward2_3, k_3);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 24 - Result_3:" + result);

		System.out.print("reward1_4:" + Arrays.toString(reward1_4));
		System.out.print(", reward2_4:" + Arrays.toString(reward2_4));
		System.out.println(", k_4:" + k_4);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_4, reward2_4, k_4);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 17 - Result_4:" + result);

		System.out.print("reward1_5:" + Arrays.toString(reward1_5));
		System.out.print(", reward2_5:" + Arrays.toString(reward2_5));
		System.out.println(", k_5:" + k_5);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_5, reward2_5, k_5);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 22 - Result_5:" + result);

		System.out.print("reward1_6:" + Arrays.toString(reward1_6));
		System.out.print(", reward2_6:" + Arrays.toString(reward2_6));
		System.out.println(", k_6:" + k_6);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_6, reward2_6, k_6);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 15 - Result_6:" + result);

		System.out.print("reward1_7:" + Arrays.toString(reward1_7));
		System.out.print(", reward2_7:" + Arrays.toString(reward2_7));
		System.out.println(", k_7:" + k_7);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_7, reward2_7, k_7);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 14 - Result_7:" + result);

		System.out.println("reward1_8:" + Arrays.toString(reward1_8));
		System.out.println("reward2_8:" + Arrays.toString(reward2_8));
		System.out.println("k_8:" + k_8);
		start = System.currentTimeMillis();
		result = solution.miceAndCheese4(reward1_8, reward2_8, k_8);
		System.out.println("Time:" + (System.currentTimeMillis() - start) + ", 131791 - Result_8:" + result);
	}

	// 131791
	private static int[] reward1_8 = { 56, 11, 44, 64, 48, 22, 35, 39, 53, 2, 40, 70, 59, 40, 27, 68, 38, 63, 21, 59,
			46, 25, 24, 30, 34, 41, 9, 59, 12, 46, 61, 35, 35, 45, 33, 6, 35, 62, 31, 39, 34, 36, 64, 38, 57, 57, 56,
			29, 39, 70, 10, 32, 71, 40, 3, 43, 55, 29, 26, 32, 1, 56, 67, 45, 46, 52, 19, 7, 48, 2, 61, 32, 4, 13, 31,
			14, 61, 35, 24, 65, 41, 32, 52, 27, 60, 62, 31, 48, 40, 5, 50, 8, 64, 36, 2, 4, 70, 40, 32, 46, 34, 56, 35,
			69, 44, 31, 44, 7, 55, 34, 68, 14, 9, 2, 39, 42, 17, 11, 2, 56, 56, 42, 9, 29, 59, 45, 47, 56, 41, 37, 66,
			54, 30, 31, 13, 56, 42, 61, 53, 67, 26, 53, 40, 21, 67, 16, 20, 65, 18, 36, 52, 54, 42, 6, 29, 55, 68, 68,
			62, 7, 42, 21, 4, 43, 1, 59, 47, 40, 2, 50, 65, 62, 47, 71, 50, 11, 57, 42, 48, 36, 27, 17, 45, 62, 50, 5,
			34, 62, 57, 9, 23, 53, 3, 21, 44, 8, 10, 30, 41, 61, 52, 49, 46, 1, 17, 36, 32, 58, 49, 29, 48, 31, 58, 28,
			48, 32, 39, 41, 12, 39, 50, 21, 1, 45, 24, 9, 38, 66, 10, 48, 68, 29, 60, 53, 33, 63, 12, 56, 2, 33, 65, 21,
			49, 49, 3, 38, 47, 59, 5, 57, 45, 37, 41, 65, 36, 34, 40, 49, 42, 56, 36, 43, 14, 46, 3, 64, 20, 35, 8, 67,
			39, 13, 26, 60, 44, 25, 53, 47, 63, 64, 64, 11, 50, 26, 51, 56, 71, 30, 13, 55, 53, 10, 38, 11, 52, 13, 64,
			28, 45, 56, 2, 30, 1, 52, 34, 69, 11, 66, 58, 60, 20, 26, 23, 7, 40, 55, 25, 7, 34, 14, 44, 46, 53, 43, 24,
			8, 24, 53, 40, 16, 71, 16, 53, 33, 59, 1, 43, 9, 56, 52, 25, 71, 30, 57, 29, 10, 27, 26, 65, 55, 42, 21, 6,
			20, 69, 67, 62, 20, 2, 11, 49, 36, 2, 25, 19, 2, 43, 70, 30, 16, 8, 13, 37, 38, 48, 30, 6, 10, 44, 43, 46,
			29, 67, 32, 41, 61, 20, 14, 53, 15, 60, 57, 32, 22, 50, 4, 46, 54, 40, 62, 17, 71, 58, 52, 14, 28, 60, 24,
			6, 54, 65, 16, 8, 5, 5, 23, 41, 27, 61, 17, 61, 20, 3, 60, 14, 30, 52, 34, 63, 49, 25, 59, 61, 70, 16, 55,
			39, 34, 51, 31, 23, 10, 4, 18, 35, 30, 44, 30, 65, 9, 46, 35, 61, 51, 38, 67, 12, 27, 29, 41, 23, 69, 7, 64,
			3, 66, 60, 67, 21, 6, 21, 19, 64, 23, 24, 21, 22, 17, 8, 1, 64, 19, 70, 11, 4, 8, 66, 34, 10, 39, 67, 40,
			18, 15, 53, 15, 46, 9, 38, 15, 10, 34, 34, 60, 34, 71, 44, 39, 67, 59, 26, 67, 27, 41, 53, 44, 8, 9, 47, 23,
			38, 13, 27, 41, 38, 17, 20, 48, 58, 45, 55, 44, 20, 65, 19, 18, 53, 52, 6, 37, 28, 46, 51, 45, 32, 65, 60,
			1, 49, 3, 53, 36, 12, 46, 70, 50, 69, 17, 64, 68, 12, 71, 69, 54, 61, 39, 28, 11, 39, 49, 48, 62, 15, 52,
			64, 17, 41, 45, 15, 45, 61, 13, 66, 63, 26, 44, 32, 70, 13, 19, 67, 56, 41, 24, 38, 13, 53, 40, 56, 13, 17,
			13, 44, 38, 29, 25, 14, 18, 21, 70, 13, 42, 58, 43, 54, 67, 20, 25, 33, 45, 57, 58, 13, 3, 2, 59, 8, 12, 4,
			62, 28, 7, 43, 60, 15, 24, 25, 12, 53, 52, 57, 45, 5, 38, 49, 20, 11, 57, 53, 29, 65, 30, 70, 8, 24, 36, 27,
			14, 42, 65, 55, 61, 47, 13, 12, 35, 11, 64, 32, 67, 2, 71, 64, 12, 23, 39, 42, 24, 12, 44, 4, 14, 9, 15, 56,
			41, 41, 71, 24, 59, 53, 47, 11, 40, 31, 48, 68, 57, 13, 38, 10, 58, 67, 39, 58, 45, 39, 61, 8, 34, 8, 67,
			58, 14, 35, 15, 50, 65, 24, 28, 5, 45, 7, 33, 3, 15, 27, 27, 61, 18, 33, 59, 39, 22, 15, 44, 62, 28, 59, 34,
			53, 49, 47, 31, 30, 27, 59, 3, 31, 15, 62, 17, 10, 45, 16, 54, 67, 43, 70, 38, 49, 42, 68, 33, 49, 1, 4, 38,
			3, 62, 70, 40, 29, 44, 40, 58, 17, 63, 17, 41, 8, 27, 57, 12, 1, 7, 52, 42, 31, 69, 71, 12, 69, 22, 6, 39,
			15, 8, 55, 30, 6, 17, 68, 22, 22, 4, 33, 10, 5, 65, 56, 59, 8, 55, 67, 47, 43, 1, 16, 9, 49, 4, 23, 9, 56,
			70, 46, 44, 30, 37, 37, 69, 5, 56, 44, 45, 18, 65, 5, 16, 31, 28, 8, 59, 29, 42, 41, 37, 32, 65, 56, 70, 60,
			50, 23, 55, 13, 4, 12, 14, 10, 29, 15, 69, 1, 47, 18, 22, 31, 22, 45, 1, 21, 27, 12, 55, 47, 20, 16, 5, 1,
			6, 47, 63, 69, 52, 57, 4, 62, 12, 2, 26, 34, 17, 43, 23, 7, 70, 29, 58, 56, 43, 30, 23, 12, 60, 15, 57, 37,
			19, 42, 67, 67, 14, 64, 31, 66, 35, 20, 49, 41, 37, 39, 60, 45, 46, 67, 21, 56, 44, 48, 41, 16, 3, 10, 66,
			65, 68, 65, 10, 50, 40, 20, 63, 71, 69, 27, 68, 27, 36, 30, 14, 20, 26, 61, 71, 32, 35, 36, 58, 71, 23, 14,
			55, 38, 40, 43, 40, 47, 67, 37, 7, 10, 41, 45, 63, 8, 69, 62, 64, 18, 52, 9, 29, 37, 1, 35, 27, 49, 36, 20,
			55, 44, 69, 60, 12, 41, 14, 1, 10, 15, 46, 34, 39, 11, 39, 66, 68, 18, 29, 65, 38, 4, 28, 23, 24, 29, 7, 28,
			17, 48, 39, 16, 2, 13, 9, 61, 70, 15, 25, 20, 70, 47, 43, 15, 42, 64, 26, 57, 45, 69, 38, 6, 58, 62, 44, 25,
			42, 5, 42, 31, 30, 23, 42, 70, 41, 65, 46, 65, 4, 64, 3, 66, 66, 14, 22, 9, 12, 39, 34, 18, 28, 42, 50, 11,
			38, 4, 23, 19, 44, 63, 46, 27, 45, 24, 49, 55, 43, 43, 41, 37, 48, 26, 64, 34, 37, 28, 11, 4, 14, 58, 20,
			17, 22, 47, 70, 19, 53, 26, 9, 63, 47, 51, 7, 58, 27, 33, 5, 51, 30, 33, 45, 30, 43, 10, 51, 15, 53, 16, 58,
			3, 5, 47, 59, 55, 70, 40, 8, 22, 19, 55, 34, 18, 44, 30, 43, 17, 12, 56, 9, 18, 49, 41, 69, 19, 42, 4, 68,
			37, 58, 47, 70, 52, 22, 11, 9, 67, 4, 12, 17, 55, 48, 48, 20, 53, 37, 24, 38, 36, 36, 1, 34, 17, 50, 3, 16,
			68, 61, 51, 19, 60, 52, 58, 28, 16, 58, 30, 66, 31, 3, 54, 52, 66, 6, 12, 16, 51, 67, 15, 53, 70, 67, 17,
			14, 60, 70, 19, 60, 71, 68, 35, 41, 36, 61, 14, 44, 11, 3, 67, 29, 3, 1, 6, 24, 24, 19, 45, 3, 13, 64, 62,
			47, 58, 50, 18, 3, 5, 45, 10, 51, 30, 1, 54, 53, 57, 31, 11, 49, 47, 15, 38, 24, 70, 49, 36, 39, 14, 21, 34,
			47, 26, 54, 18, 1, 30, 59, 53, 41, 30, 63, 49, 58, 14, 59, 37, 11, 18, 5, 38, 66, 7, 47, 8, 10, 62, 37, 1,
			42, 60, 41, 18, 60, 64, 51, 65, 27, 54, 35, 71, 17, 9, 38, 58, 62, 68, 9, 48, 57, 32, 31, 35, 55, 27, 11, 8,
			29, 20, 18, 25, 8, 3, 51, 4, 1, 23, 55, 34, 47, 57, 50, 6, 65, 5, 50, 3, 6, 38, 44, 58, 56, 61, 11, 71, 54,
			57, 66, 18, 43, 41, 34, 50, 38, 63, 41, 7, 29, 10, 41, 22, 20, 57, 33, 39, 22, 16, 58, 42, 48, 42, 7, 65,
			11, 44, 9, 63, 69, 40, 51, 36, 38, 16, 62, 16, 71, 36, 58, 27, 14, 70, 36, 14, 46, 5, 38, 30, 6, 70, 28, 56,
			45, 67, 5, 65, 25, 6, 40, 64, 57, 3, 39, 3, 3, 6, 51, 42, 32, 52, 52, 40, 8, 44, 51, 57, 39, 53, 40, 3, 3,
			39, 36, 24, 20, 14, 41, 68, 49, 40, 50, 8, 41, 61, 46, 6, 37, 44, 8, 56, 62, 53, 28, 21, 64, 32, 53, 36, 23,
			26, 59, 60, 53, 66, 66, 28, 8, 58, 68, 38, 51, 24, 6, 44, 17, 70, 6, 38, 64, 16, 48, 26, 71, 51, 21, 27, 14,
			25, 33, 10, 11, 65, 28, 26, 6, 52, 26, 70, 62, 55, 43, 46, 63, 52, 57, 43, 32, 62, 62, 13, 64, 64, 20, 46,
			38, 16, 63, 37, 14, 35, 1, 56, 43, 11, 23, 54, 63, 5, 13, 60, 67, 22, 65, 65, 62, 30, 59, 57, 17, 42, 34,
			19, 8, 69, 69, 21, 24, 57, 60, 51, 40, 71, 2, 29, 31, 47, 23, 57, 7, 26, 27, 17, 52, 19, 58, 17, 31, 65, 9,
			4, 9, 70, 40, 31, 20, 1, 47, 28, 41, 61, 20, 64, 68, 35, 24, 5, 28, 44, 14, 66, 66, 4, 20, 27, 70, 49, 56,
			23, 50, 42, 68, 55, 8, 49, 2, 22, 70, 21, 18, 18, 40, 55, 54, 34, 12, 13, 46, 55, 47, 8, 31, 40, 25, 30, 64,
			54, 70, 15, 22, 25, 3, 44, 28, 37, 35, 4, 56, 11, 49, 58, 58, 13, 21, 38, 3, 8, 43, 23, 46, 24, 23, 26, 49,
			64, 29, 26, 14, 19, 66, 50, 67, 7, 50, 37, 9, 68, 23, 14, 26, 51, 40, 29, 42, 1, 65, 32, 49, 3, 69, 19, 21,
			21, 42, 52, 69, 62, 45, 54, 70, 63, 41, 57, 57, 9, 16, 57, 67, 44, 25, 21, 4, 37, 10, 49, 45, 36, 46, 22,
			71, 35, 42, 46, 6, 21, 68, 47, 22, 28, 61, 9, 49, 43, 47, 38, 34, 62, 18, 42, 9, 5, 53, 3, 29, 57, 69, 46,
			49, 63, 55, 68, 13, 68, 56, 69, 27, 32, 6, 71, 61, 62, 38, 70, 53, 8, 71, 49, 68, 71, 44, 2, 21, 42, 46, 14,
			46, 60, 8, 35, 40, 46, 9, 18, 51, 65, 61, 6, 64, 13, 2, 11, 50, 64, 30, 26, 12, 7, 54, 3, 57, 8, 62, 21, 52,
			39, 38, 34, 27, 8, 32, 3, 26, 69, 47, 10, 42, 54, 19, 53, 60, 42, 47, 41, 5, 22, 49, 31, 60, 7, 17, 27, 37,
			15, 15, 33, 43, 15, 17, 5, 32, 1, 70, 67, 61, 46, 26, 52, 27, 4, 19, 15, 22, 13, 5, 59, 14, 10, 62, 17, 35,
			62, 33, 14, 58, 63, 11, 38, 31, 32, 8, 14, 59, 23, 65, 24, 52, 67, 36, 70, 28, 11, 20, 27, 43, 55, 71, 48,
			69, 37, 42, 4, 70, 41, 50, 56, 62, 69, 24, 28, 64, 24, 1, 62, 28, 63, 54, 53, 41, 47, 64, 47, 31, 64, 1, 40,
			15, 66, 54, 69, 66, 23, 37, 43, 25, 5, 14, 40, 52, 3, 54, 57, 61, 6, 58, 12, 20, 48, 48, 45, 40, 64, 42, 55,
			21, 19, 49, 44, 40, 61, 70, 37, 69, 61, 51, 62, 37, 57, 63, 40, 63, 54, 4, 68, 16, 50, 7, 13, 65, 67, 45,
			59, 37, 50, 21, 6, 23, 17, 19, 36, 13, 15, 6, 36, 6, 15, 70, 23, 48, 55, 17, 36, 18, 47, 24, 41, 62, 21, 69,
			29, 48, 42, 58, 56, 20, 22, 58, 35, 36, 30, 52, 58, 16, 17, 24, 58, 10, 63, 45, 59, 10, 18, 67, 32, 21, 4,
			67, 43, 10, 61, 26, 36, 12, 28, 20, 40, 47, 57, 70, 3, 68, 2, 30, 52, 27, 54, 17, 31, 42, 68, 3, 35, 63, 38,
			15, 66, 17, 63, 66, 41, 22, 62, 9, 36, 18, 54, 23, 67, 38, 43, 52, 53, 62, 50, 42, 37, 3, 70, 20, 22, 37,
			45, 66, 60, 32, 1, 60, 44, 2, 26, 37, 27, 70, 49, 11, 49, 50, 7, 70, 15, 37, 58, 54, 60, 18, 27, 23, 11, 22,
			19, 60, 2, 23, 55, 17, 5, 12, 65, 5, 60, 30, 33, 51, 42, 4, 11, 13, 43, 67, 38, 64, 22, 60, 17, 2, 23, 41,
			58, 56, 8, 25, 12, 28, 2, 54, 15, 38, 23, 10, 46, 52, 56, 35, 30, 25, 65, 23, 61, 51, 13, 61, 22, 8, 4, 41,
			6, 29, 68, 67, 12, 18, 19, 31, 55, 15, 54, 44, 16, 56, 28, 46, 15, 35, 28, 58, 25, 49, 52, 13, 36, 2, 7, 65,
			27, 18, 37, 53, 45, 55, 24, 60, 2, 10, 48, 35, 5, 41, 53, 5, 15, 64, 19, 59, 38, 57, 67, 49, 65, 27, 17, 16,
			16, 30, 55, 63, 69, 38, 17, 47, 16, 69, 22, 14, 9, 39, 61, 37, 38, 41, 64, 67, 56, 59, 69, 19, 50, 11, 44,
			37, 3, 54, 30, 6, 6, 54, 41, 68, 20, 22, 32, 42, 63, 13, 47, 50, 66, 70, 10, 2, 16, 22, 61, 15, 27, 3, 69,
			51, 18, 45, 65, 71, 63, 49, 53, 39, 55, 37, 26, 47, 38, 3, 62, 11, 20, 49, 24, 37, 54, 15, 29, 36, 47, 71,
			37, 60, 60, 57, 44, 60, 36, 4, 58, 49, 28, 11, 5, 14, 55, 20, 16, 35, 50, 47, 36, 69, 36, 55, 44, 30, 22,
			25, 8, 37, 59, 66, 24, 1, 12, 36, 69, 46, 41, 40, 14, 44, 3, 4, 58, 45, 7, 53, 45, 21, 65, 21, 2, 31, 2, 7,
			29, 52, 67, 31, 35, 16, 60, 55, 65, 49, 17, 29, 67, 11, 63, 30, 44, 68, 1, 61, 27, 11, 26, 56, 59, 19, 40,
			55, 48, 61, 48, 30, 56, 37, 20, 45, 22, 10, 9, 28, 16, 23, 55, 58, 12, 11, 51, 19, 35, 32, 6, 70, 66, 61,
			57, 22, 53, 60, 29, 59, 27, 34, 36, 28, 33, 71, 12, 49, 63, 49, 44, 25, 42, 65, 29, 12, 5, 10, 67, 30, 1,
			44, 63, 15, 26, 10, 70, 53, 38, 54, 18, 9, 25, 9, 67, 44, 17, 31, 24, 61, 38, 63, 20, 61, 37, 46, 26, 13, 2,
			55, 33, 32, 23, 29, 2, 30, 25, 68, 70, 29, 45, 49, 33, 58, 42, 20, 25, 49, 17, 39, 51, 17, 42, 38, 19, 20,
			68, 8, 42, 54, 6, 2, 64, 3, 18, 36, 31, 19, 65, 48, 68, 52, 6, 43, 71, 35, 40, 56, 44, 6, 24, 34, 33, 49,
			52, 39, 61, 24, 56, 29, 52, 24, 54, 17, 43, 10, 33, 23, 22, 65, 11, 39, 17, 19, 38, 24, 33, 56, 52, 38, 64,
			4, 7, 60, 36, 47, 60, 69, 65, 67, 33, 6, 26, 26, 25, 33, 7, 53, 44, 22, 6, 56, 64, 40, 65, 67, 5, 41, 46,
			35, 68, 13, 48, 56, 55, 3, 12, 5, 3, 65, 3, 71, 44, 32, 59, 19, 48, 49, 53, 41, 49, 3, 40, 8, 65, 17, 27,
			46, 33, 13, 1, 9, 63, 50, 38, 18, 32, 20, 29, 49, 64, 34, 55, 3, 60, 8, 14, 2, 5, 41, 64, 17, 52, 53, 23,
			24, 37, 37, 27, 47, 4, 61, 13, 54, 52, 5, 47, 59, 36, 44, 58, 55, 43, 9, 54, 4, 15, 53, 14, 67, 51, 18, 3,
			13, 11, 4, 30, 24, 13, 22, 22, 4, 29, 53, 33, 45, 23, 1, 66, 52, 69, 29, 14, 20, 10, 12, 46, 50, 29, 25, 71,
			23, 57, 44, 71, 57, 18, 17, 1, 3, 64, 62, 8, 41, 3, 56, 46, 69, 33, 40, 34, 38, 42, 14, 14, 19, 69, 67, 9,
			11, 32, 19, 67, 47, 3, 8, 25, 42, 15, 51, 6, 66, 54, 56, 31, 45, 66, 11, 70, 11, 9, 46, 5, 62, 8, 18, 49,
			27, 58, 66, 52, 30, 23, 69, 61, 17, 52, 20, 62, 8, 33, 67, 38, 29, 41, 34, 65, 58, 2, 3, 67, 29, 37, 20, 44,
			5, 16, 45, 46, 60, 36, 69, 20, 14, 45, 56, 8, 45, 44, 36, 35, 56, 2, 69, 36, 40, 70, 59, 58, 67, 11, 31, 56,
			9, 42, 48, 51, 38, 37, 24, 43, 28, 1, 34, 50, 56, 27, 54, 47, 71, 25, 2, 47, 42, 55, 4, 46, 61, 16, 66, 49,
			31, 69, 27, 26, 11, 19, 17, 53, 1, 36, 24, 13, 9, 63, 66, 54, 51, 48, 55, 21, 47, 65, 11, 61, 46, 61, 45,
			32, 13, 16, 71, 47, 17, 51, 12, 49, 8, 14, 52, 69, 60, 69, 41, 59, 56, 12, 5, 48, 36, 62, 69, 47, 42, 10,
			21, 51, 29, 1, 70, 21, 68, 22, 44, 19, 62, 42, 24, 59, 6, 60, 34, 2, 23, 31, 22, 46, 9, 41, 56, 69, 42, 6,
			43, 22, 25, 9, 25, 62, 30, 11, 4, 2, 22, 48, 46, 71, 67, 12, 47, 52, 18, 22, 66, 68, 66, 7, 50, 38, 7, 7,
			14, 10, 32, 3, 26, 60, 6, 34, 48, 27, 1, 16, 34, 14, 39, 67, 27, 39, 17, 23, 13, 27, 46, 1, 60, 12, 31, 31,
			24, 4, 5, 27, 27, 2, 39, 41, 58, 30, 66, 7, 11, 59, 69, 2, 48, 52, 66, 65, 41, 39, 24, 59, 4, 13, 70, 59,
			53, 3, 62, 14, 40, 8, 43, 36, 14, 51, 26, 33, 36, 68, 71, 20, 17, 62, 43, 58, 5, 26, 41, 41, 25, 43, 50, 61,
			56, 62, 5, 19, 53, 57, 69, 13, 41, 70, 50, 64, 54, 66, 31, 68, 34, 65, 70, 58, 54, 24, 5, 19, 12, 21, 48,
			18, 62, 37, 38, 16, 30, 23, 18, 48, 62, 62, 57, 23, 42, 46, 22, 60, 1, 62, 37, 67, 51, 40, 49, 40, 12, 27,
			62, 37, 27, 9, 32, 20, 2, 36, 30, 51, 67, 23, 29, 56, 39, 69, 34, 27, 42, 14, 59, 20, 34, 3, 56, 53, 43, 33,
			42, 26, 21, 10, 25, 6, 7, 64, 65, 58, 7, 11, 62, 69, 1, 54, 6, 44, 5, 28, 46, 47, 61, 16, 58, 5, 23, 14, 58,
			32, 37, 39, 64, 14, 55, 60, 52, 36, 9, 55, 41, 28, 37, 5, 5, 18, 3, 65, 69, 70, 61, 7, 47, 19, 66, 53, 17,
			70, 53, 42, 34, 19, 29, 31, 58, 11, 44, 21, 33, 28, 39, 49, 57, 47, 29, 68, 13, 47, 29, 57, 36, 47, 46, 69,
			23, 33, 45, 27, 63, 44, 22, 1, 59, 31, 54, 10, 66, 62, 54, 25, 6, 46, 44, 3, 31, 58, 6, 46, 57, 45, 25 };
	private static int[] reward2_8 = { 14, 2, 8, 27, 63, 26, 66, 48, 28, 42, 6, 45, 6, 41, 40, 36, 26, 53, 23, 39, 14,
			63, 7, 68, 35, 4, 16, 67, 50, 30, 67, 19, 4, 47, 55, 46, 55, 7, 49, 71, 20, 12, 30, 31, 36, 17, 53, 63, 21,
			12, 62, 48, 65, 2, 70, 56, 17, 36, 31, 30, 14, 28, 3, 22, 40, 56, 58, 60, 70, 46, 47, 70, 46, 13, 2, 31, 9,
			35, 32, 29, 57, 59, 51, 18, 40, 42, 59, 21, 4, 70, 44, 43, 58, 22, 15, 35, 67, 54, 39, 14, 37, 58, 15, 40,
			41, 9, 47, 59, 56, 34, 66, 68, 45, 51, 1, 64, 46, 29, 55, 46, 62, 58, 49, 11, 51, 26, 34, 26, 5, 1, 60, 22,
			70, 19, 40, 32, 39, 49, 36, 64, 35, 4, 7, 24, 7, 34, 36, 49, 39, 12, 64, 13, 51, 58, 28, 63, 29, 46, 48, 22,
			48, 7, 45, 47, 58, 48, 20, 19, 13, 46, 63, 59, 27, 28, 55, 9, 28, 41, 41, 1, 56, 49, 21, 45, 30, 46, 43, 34,
			36, 47, 9, 46, 56, 15, 53, 25, 55, 47, 43, 67, 8, 62, 19, 33, 55, 44, 31, 31, 10, 8, 54, 25, 51, 18, 48, 15,
			5, 51, 64, 38, 28, 60, 57, 34, 28, 70, 2, 50, 48, 42, 40, 2, 30, 55, 31, 55, 56, 62, 57, 25, 28, 53, 32, 48,
			4, 58, 14, 60, 32, 40, 51, 44, 34, 17, 35, 13, 28, 52, 63, 42, 19, 51, 65, 1, 11, 37, 8, 61, 57, 3, 13, 58,
			22, 64, 49, 51, 50, 37, 29, 14, 55, 42, 71, 37, 31, 71, 36, 50, 21, 13, 57, 62, 53, 28, 48, 8, 27, 18, 6,
			15, 68, 24, 38, 10, 29, 1, 62, 68, 15, 42, 54, 22, 40, 13, 30, 6, 47, 8, 38, 32, 47, 58, 58, 1, 49, 54, 14,
			11, 61, 37, 37, 44, 59, 41, 22, 59, 4, 46, 30, 18, 31, 30, 33, 14, 24, 6, 32, 59, 2, 42, 57, 52, 60, 29, 19,
			9, 19, 57, 22, 48, 43, 65, 47, 22, 71, 69, 23, 70, 45, 54, 53, 46, 48, 30, 49, 11, 30, 49, 5, 29, 69, 19,
			37, 25, 6, 10, 38, 60, 39, 50, 38, 23, 18, 60, 63, 33, 55, 33, 48, 38, 25, 52, 58, 46, 19, 59, 9, 62, 41,
			27, 38, 20, 18, 16, 53, 22, 70, 13, 47, 37, 25, 23, 36, 52, 64, 25, 36, 64, 65, 50, 18, 1, 53, 2, 66, 43,
			58, 14, 16, 54, 15, 34, 12, 3, 68, 37, 41, 3, 19, 45, 43, 34, 36, 13, 9, 27, 16, 19, 34, 3, 61, 12, 4, 30,
			46, 3, 64, 45, 20, 44, 21, 23, 59, 59, 20, 46, 28, 57, 54, 11, 51, 67, 38, 62, 32, 36, 33, 52, 38, 36, 4,
			34, 49, 23, 36, 46, 9, 39, 65, 60, 61, 66, 67, 9, 25, 33, 56, 13, 50, 13, 38, 10, 9, 71, 68, 15, 15, 62, 25,
			66, 32, 26, 45, 29, 69, 17, 13, 16, 56, 29, 6, 38, 28, 11, 4, 37, 61, 26, 40, 17, 3, 35, 48, 9, 22, 30, 5,
			25, 37, 18, 36, 42, 29, 25, 13, 43, 42, 53, 15, 18, 44, 9, 59, 62, 66, 23, 30, 53, 68, 50, 68, 68, 52, 48,
			49, 53, 3, 36, 24, 69, 12, 45, 20, 36, 37, 28, 17, 46, 35, 50, 65, 55, 64, 4, 67, 35, 62, 4, 39, 51, 45, 34,
			11, 13, 25, 18, 46, 44, 7, 9, 32, 54, 35, 67, 5, 58, 46, 36, 29, 9, 50, 4, 28, 54, 64, 56, 52, 4, 48, 37, 5,
			46, 13, 60, 31, 6, 57, 65, 55, 4, 23, 41, 54, 13, 66, 28, 56, 3, 43, 31, 23, 69, 44, 61, 35, 9, 9, 1, 23,
			53, 71, 49, 67, 16, 62, 24, 22, 47, 54, 23, 44, 5, 54, 43, 31, 27, 15, 3, 13, 13, 17, 66, 39, 31, 33, 24,
			64, 10, 11, 8, 38, 33, 56, 40, 47, 10, 44, 60, 9, 52, 57, 42, 15, 29, 39, 2, 70, 60, 5, 37, 35, 29, 56, 58,
			11, 60, 12, 39, 32, 39, 70, 19, 56, 71, 44, 59, 43, 49, 51, 43, 1, 51, 3, 43, 38, 43, 22, 2, 68, 69, 41, 28,
			41, 63, 32, 13, 11, 1, 45, 25, 54, 14, 5, 24, 11, 21, 28, 19, 54, 35, 7, 68, 67, 58, 4, 28, 30, 41, 31, 70,
			69, 5, 40, 9, 21, 47, 4, 70, 37, 28, 44, 20, 20, 20, 5, 20, 28, 59, 71, 10, 18, 7, 6, 40, 53, 4, 44, 42, 33,
			17, 5, 59, 36, 48, 57, 16, 36, 27, 16, 59, 53, 20, 10, 52, 41, 40, 22, 22, 44, 54, 50, 4, 54, 3, 53, 55, 48,
			25, 13, 24, 22, 20, 19, 69, 21, 49, 8, 14, 23, 60, 63, 64, 59, 69, 66, 7, 25, 49, 13, 56, 51, 67, 50, 38,
			70, 41, 1, 21, 34, 46, 28, 71, 4, 14, 7, 19, 68, 63, 27, 46, 37, 41, 37, 4, 52, 45, 60, 9, 32, 28, 49, 62,
			42, 25, 44, 43, 25, 61, 34, 14, 26, 17, 63, 24, 29, 53, 45, 9, 22, 35, 67, 10, 7, 55, 18, 27, 32, 62, 20,
			17, 60, 5, 58, 6, 3, 34, 61, 38, 37, 71, 27, 22, 19, 31, 9, 23, 44, 7, 14, 60, 2, 3, 41, 33, 10, 35, 20, 20,
			27, 67, 45, 20, 67, 26, 54, 67, 39, 65, 24, 21, 35, 46, 4, 58, 44, 66, 70, 22, 61, 20, 4, 1, 2, 42, 58, 64,
			57, 22, 7, 58, 47, 20, 61, 54, 29, 29, 19, 37, 23, 57, 29, 70, 12, 25, 11, 5, 65, 69, 22, 25, 43, 42, 38,
			10, 42, 64, 20, 32, 41, 24, 59, 65, 32, 20, 12, 70, 39, 3, 47, 5, 36, 71, 31, 40, 42, 42, 24, 23, 7, 52, 65,
			29, 17, 12, 38, 35, 64, 20, 49, 49, 10, 61, 13, 7, 60, 52, 23, 2, 61, 38, 19, 10, 60, 67, 42, 56, 30, 36,
			31, 24, 48, 13, 41, 21, 19, 54, 65, 6, 27, 42, 37, 54, 41, 26, 5, 5, 26, 64, 50, 17, 59, 21, 17, 51, 42, 15,
			36, 2, 24, 71, 3, 41, 24, 32, 50, 14, 38, 9, 3, 50, 49, 5, 57, 3, 25, 18, 14, 14, 31, 43, 28, 59, 13, 59,
			63, 32, 2, 32, 61, 42, 64, 32, 41, 20, 19, 33, 63, 66, 65, 48, 31, 51, 61, 59, 20, 69, 13, 34, 19, 20, 4,
			28, 13, 29, 15, 4, 47, 70, 1, 17, 1, 54, 49, 67, 28, 25, 57, 36, 52, 66, 20, 20, 12, 65, 45, 29, 49, 44, 38,
			25, 33, 49, 32, 57, 57, 64, 28, 47, 30, 70, 23, 64, 63, 52, 66, 34, 26, 23, 58, 41, 10, 58, 43, 53, 65, 63,
			59, 31, 35, 60, 8, 33, 25, 25, 41, 54, 42, 65, 14, 52, 64, 67, 30, 21, 13, 12, 55, 40, 32, 69, 4, 20, 69,
			10, 14, 23, 52, 20, 23, 2, 6, 30, 54, 7, 11, 23, 65, 54, 8, 38, 29, 21, 62, 71, 54, 52, 26, 4, 39, 52, 65,
			36, 52, 42, 25, 47, 10, 44, 65, 20, 51, 57, 60, 71, 35, 55, 10, 5, 59, 60, 61, 44, 24, 44, 18, 56, 33, 53,
			9, 13, 2, 32, 36, 32, 33, 67, 68, 68, 64, 26, 35, 68, 68, 27, 68, 40, 12, 38, 51, 9, 46, 23, 57, 2, 61, 49,
			23, 12, 54, 56, 51, 45, 63, 41, 19, 61, 61, 54, 38, 18, 55, 17, 46, 66, 24, 22, 69, 70, 13, 35, 70, 43, 49,
			60, 51, 13, 58, 25, 38, 59, 19, 44, 4, 11, 62, 40, 16, 53, 36, 54, 6, 57, 14, 6, 49, 53, 55, 62, 34, 42, 13,
			27, 56, 59, 71, 38, 51, 36, 36, 27, 49, 7, 10, 2, 2, 13, 3, 8, 58, 23, 68, 1, 33, 60, 8, 39, 19, 55, 66, 44,
			20, 29, 70, 2, 34, 63, 54, 64, 35, 56, 15, 30, 56, 27, 5, 25, 30, 47, 44, 13, 43, 16, 27, 44, 41, 32, 28,
			44, 49, 61, 70, 35, 8, 4, 47, 41, 56, 2, 26, 45, 9, 30, 22, 57, 22, 59, 71, 47, 6, 67, 54, 21, 47, 25, 50,
			66, 51, 18, 32, 8, 2, 42, 59, 67, 34, 13, 53, 22, 46, 5, 28, 43, 33, 25, 38, 71, 21, 59, 12, 68, 24, 1, 66,
			39, 59, 21, 7, 42, 24, 16, 13, 48, 55, 28, 70, 28, 21, 56, 65, 10, 17, 53, 33, 40, 47, 34, 62, 32, 36, 30,
			39, 53, 29, 64, 11, 31, 15, 66, 39, 8, 51, 25, 22, 23, 31, 20, 51, 30, 45, 1, 14, 50, 31, 20, 11, 17, 6, 62,
			25, 21, 47, 27, 22, 65, 43, 63, 32, 16, 9, 14, 32, 65, 30, 17, 7, 64, 12, 17, 19, 17, 60, 51, 61, 38, 9, 14,
			23, 34, 48, 12, 46, 67, 5, 14, 15, 23, 49, 6, 56, 37, 69, 69, 46, 65, 33, 44, 25, 41, 68, 55, 30, 20, 1, 71,
			71, 55, 47, 51, 55, 7, 20, 36, 27, 65, 11, 68, 51, 26, 35, 58, 13, 42, 22, 34, 38, 39, 56, 34, 23, 45, 33,
			41, 22, 60, 62, 36, 51, 10, 43, 62, 26, 8, 8, 69, 23, 25, 52, 31, 46, 1, 21, 26, 67, 21, 69, 29, 51, 53, 57,
			19, 48, 5, 7, 18, 6, 55, 6, 66, 34, 6, 52, 44, 30, 60, 65, 23, 41, 51, 59, 3, 24, 44, 65, 15, 55, 56, 49,
			28, 41, 59, 56, 43, 34, 55, 28, 32, 61, 11, 54, 8, 6, 40, 55, 25, 2, 44, 21, 44, 69, 31, 50, 22, 65, 8, 62,
			21, 32, 70, 18, 32, 7, 49, 4, 59, 57, 49, 29, 25, 64, 22, 59, 27, 27, 64, 6, 29, 57, 17, 63, 38, 26, 34, 16,
			42, 51, 3, 55, 10, 1, 61, 51, 35, 59, 20, 56, 10, 38, 9, 8, 67, 52, 65, 70, 50, 43, 24, 2, 70, 51, 37, 66,
			12, 3, 10, 17, 59, 21, 32, 67, 25, 54, 53, 71, 58, 55, 58, 23, 54, 11, 53, 71, 3, 16, 64, 23, 66, 69, 5, 10,
			21, 56, 1, 15, 11, 50, 31, 47, 61, 61, 50, 30, 63, 7, 62, 71, 48, 31, 64, 22, 8, 41, 9, 48, 10, 32, 6, 1,
			11, 28, 69, 55, 48, 57, 51, 49, 12, 6, 25, 33, 21, 47, 61, 64, 29, 13, 15, 34, 39, 61, 15, 57, 29, 31, 66,
			60, 61, 51, 2, 60, 15, 35, 22, 34, 13, 8, 34, 1, 25, 69, 70, 43, 3, 54, 34, 66, 60, 19, 53, 5, 29, 70, 19,
			29, 24, 3, 17, 67, 60, 62, 6, 24, 15, 61, 40, 18, 53, 42, 2, 3, 26, 60, 51, 7, 3, 43, 60, 7, 64, 20, 33, 10,
			9, 28, 71, 39, 13, 1, 5, 39, 62, 47, 56, 45, 22, 64, 8, 60, 1, 30, 45, 40, 47, 59, 71, 55, 19, 53, 15, 36,
			46, 11, 35, 54, 13, 62, 23, 65, 20, 69, 12, 68, 15, 57, 24, 31, 58, 3, 40, 10, 16, 33, 16, 66, 3, 43, 52,
			65, 61, 2, 25, 65, 13, 6, 16, 39, 66, 30, 40, 29, 18, 41, 13, 28, 67, 38, 16, 25, 27, 33, 31, 31, 3, 56, 53,
			58, 7, 44, 15, 51, 70, 4, 17, 36, 33, 49, 48, 12, 18, 13, 61, 45, 5, 41, 65, 48, 36, 21, 25, 13, 19, 54, 55,
			24, 64, 29, 60, 42, 10, 20, 61, 55, 38, 1, 45, 29, 31, 14, 28, 45, 54, 34, 38, 3, 1, 6, 33, 63, 71, 50, 55,
			55, 9, 45, 71, 66, 33, 30, 54, 24, 34, 26, 45, 68, 5, 45, 4, 68, 59, 16, 45, 49, 20, 13, 18, 35, 9, 5, 44,
			37, 68, 1, 29, 15, 45, 63, 70, 65, 25, 55, 19, 42, 38, 37, 24, 67, 24, 34, 62, 21, 67, 47, 36, 12, 47, 26,
			10, 36, 38, 48, 66, 49, 12, 42, 13, 58, 49, 60, 7, 70, 15, 26, 48, 19, 37, 41, 55, 12, 40, 59, 8, 12, 30,
			48, 44, 7, 32, 27, 47, 32, 31, 1, 20, 47, 65, 58, 61, 24, 10, 5, 9, 66, 27, 30, 17, 27, 9, 24, 40, 29, 28,
			34, 50, 24, 63, 44, 68, 68, 59, 29, 9, 54, 2, 35, 68, 61, 69, 15, 7, 15, 37, 67, 55, 67, 61, 35, 34, 52, 42,
			33, 67, 2, 38, 71, 43, 32, 48, 10, 6, 22, 58, 19, 65, 44, 36, 1, 49, 44, 50, 65, 26, 17, 34, 20, 57, 61, 67,
			65, 32, 17, 10, 14, 30, 50, 19, 64, 40, 40, 51, 32, 44, 54, 14, 70, 14, 36, 9, 19, 57, 23, 2, 20, 40, 13,
			39, 14, 60, 50, 38, 59, 30, 65, 70, 65, 49, 27, 15, 26, 37, 14, 20, 50, 27, 50, 43, 47, 36, 42, 1, 67, 12,
			11, 59, 70, 69, 48, 37, 65, 70, 3, 52, 9, 31, 31, 38, 49, 14, 2, 19, 6, 38, 5, 14, 60, 46, 65, 25, 19, 43,
			69, 18, 17, 55, 34, 37, 30, 55, 38, 10, 42, 51, 24, 20, 48, 32, 71, 65, 61, 32, 23, 33, 16, 42, 54, 3, 65,
			45, 4, 55, 71, 32, 11, 36, 22, 2, 44, 52, 52, 20, 49, 31, 3, 49, 63, 28, 24, 14, 34, 30, 58, 6, 46, 33, 18,
			18, 20, 65, 30, 31, 39, 20, 25, 59, 55, 67, 45, 49, 42, 1, 18, 42, 49, 21, 37, 50, 3, 48, 70, 10, 10, 7, 30,
			5, 12, 68, 60, 17, 54, 68, 52, 25, 69, 45, 49, 55, 11, 1, 9, 18, 70, 58, 46, 47, 19, 7, 7, 21, 1, 69, 10, 4,
			47, 38, 46, 70, 5, 26, 22, 68, 45, 36, 48, 37, 24, 26, 34, 36, 21, 38, 70, 60, 29, 31, 4, 39, 50, 65, 54,
			13, 12, 44, 6, 59, 62, 67, 11, 57, 13, 25, 41, 35, 61, 3, 68, 16, 31, 59, 27, 3, 45, 40, 38, 55, 58, 37, 71,
			45, 4, 70, 29, 46, 58, 42, 61, 24, 68, 42, 43, 40, 18, 10, 12, 53, 34, 54, 14, 10, 55, 62, 69, 32, 2, 35,
			26, 18, 63, 9, 63, 31, 56, 56, 59, 40, 8, 70, 44, 4, 2, 67, 71, 31, 65, 32, 1, 7, 26, 33, 38, 1, 56, 47, 24,
			14, 22, 70, 6, 6, 17, 16, 62, 36, 69, 2, 40, 37, 54, 42, 59, 18, 61, 71, 46, 27, 46, 67, 63, 1, 23, 17, 37,
			58, 49, 44, 71, 57, 47, 32, 24, 7, 44, 25, 6, 51, 57, 27, 29, 65, 20, 56, 15, 5, 13, 21, 51, 23, 58, 16, 26,
			4, 64, 6, 21, 52, 69, 20, 68, 42, 2, 6, 55, 56, 8, 34, 25, 34, 60, 40, 48, 35, 22, 32, 69, 50, 8, 49, 23, 9,
			65, 67, 6, 30, 31, 42, 31, 3, 26, 54, 54, 71, 60, 57, 2, 54, 16, 65, 47, 25, 39, 17, 7, 10, 15, 29, 55, 67,
			10, 9, 60, 1, 1, 53, 35, 29, 70, 32, 65, 39, 16, 46, 12, 31, 52, 18, 45, 60, 11, 71, 14, 20, 8, 47, 23, 64,
			7, 14, 3, 22, 66, 53, 29, 11, 16, 2, 64, 19, 18, 20, 34, 21, 25, 52, 53, 45, 69, 51, 50, 20, 25, 46, 22, 61,
			21, 31, 12, 61, 43, 27, 45, 18, 58, 3, 5, 69, 3, 13, 69, 40, 26, 35, 33, 13, 67, 35, 44, 26, 31, 40, 28, 4,
			46, 62, 27, 54, 59, 50, 41, 50, 56, 32, 34, 50, 62, 28, 25, 61, 44, 54, 66, 44, 61, 47, 58, 21, 34, 9, 42,
			63, 32, 15, 40, 37, 2, 30, 27, 60, 62, 27, 31, 11, 67, 46, 11, 7, 52, 7, 49, 49, 25, 28, 53, 9, 62, 2, 39,
			35, 49, 19, 15, 62, 18, 48, 25, 44, 18, 60, 14, 65, 67, 24, 48, 35, 3, 47, 16, 59, 42, 18, 44, 33, 11, 68,
			64, 12, 49, 50, 41, 28, 58, 37, 15, 59, 66, 33, 67, 15, 34, 58, 21, 41, 25, 8, 46, 63, 13, 28, 23, 47, 63,
			66, 6, 42, 9, 41, 19, 25, 27, 27, 13, 35, 6, 56, 24, 55, 2, 25, 56, 46, 45, 42, 10, 29, 17, 36, 17, 13, 55,
			14, 46, 11, 50, 32, 33, 44, 45, 45, 69, 67, 66, 47, 43, 37, 27, 64, 10, 9, 64, 7, 62, 26, 31, 28, 31, 38,
			12, 7, 44, 44, 55, 10, 33, 16, 8, 61, 19, 9, 31, 4, 70, 23, 58, 47, 70, 13, 34, 41, 68, 26, 20, 50, 61, 68,
			51, 57, 42, 35, 35, 63, 48, 61, 21, 14, 59, 62, 16, 13, 22, 44, 8, 62, 16, 35, 65, 54, 66, 51, 43, 49, 69,
			12, 67, 24, 17, 49, 12, 67, 20, 6, 49, 34, 58, 12, 18, 26, 10, 71, 35, 19, 54, 67, 30, 26, 65, 66, 6, 54,
			29, 63, 17, 61, 38, 6, 49, 26, 71, 49, 23, 2, 53, 37, 24, 3, 64, 44, 5, 9, 8, 10, 46, 43, 7, 26, 14, 63, 10,
			66, 11, 49, 65, 65, 2, 43, 1, 54, 62, 38, 65, 40, 46, 38, 2, 20, 10, 27, 60, 26, 39, 27, 66, 4, 45, 6, 63,
			52, 60, 64, 46, 53, 54, 65, 40, 41, 7, 60, 41, 3, 46, 36, 56, 55, 1, 2, 45, 54, 35, 55, 6, 44, 11, 52, 13,
			49, 48, 5, 55, 16, 7, 38, 61, 63, 10, 8, 21, 23, 8, 31, 46, 3, 16, 33, 28, 69, 67, 14, 25, 30, 56, 27, 7,
			25, 10, 15, 49, 8, 45, 67, 62, 19, 69, 66, 21, 56, 30, 49, 59, 11, 33, 41, 45, 29, 17, 43, 21, 67, 6, 12,
			23, 57, 4, 15, 46, 59, 36, 39, 47, 40, 6, 6, 56, 23, 1, 66, 52, 34, 37, 66, 31, 17, 43, 60, 36, 34, 30, 29,
			43, 46, 64, 9, 12, 27, 35, 32, 62, 2, 51, 23, 59, 17, 33, 46, 55, 69, 5, 70, 64, 63, 32, 63, 35, 30, 58, 49,
			59, 25, 7, 7, 30, 39, 58, 14, 54, 16, 5, 9, 65, 18, 51, 57, 23, 30, 68, 48, 15, 30, 69, 9, 54, 26, 71, 66,
			34, 17, 34, 4, 55, 30, 27, 70, 18, 8, 25, 30, 53, 68, 45, 18, 55, 68, 68, 42, 66, 50, 54, 5, 23, 21, 6, 23,
			35, 64, 1, 45, 53, 27, 17, 19, 9, 5, 64, 8, 12, 20, 6, 2, 26, 19, 51, 10, 55, 6, 63, 17, 36, 29 };
	private static int k_8 = 312;
}

class KeyValue implements Comparable<KeyValue> {
	public int key;
	public int value;

	public KeyValue(int key, int value) {
		this.key = key;
		this.value = value;
	}

	@Override
	public int compareTo(KeyValue o) {
		return value - o.value;
	}

	@Override
	public String toString() {
		return "<key:" + key + ", value:" + value + ">";
	}
}
